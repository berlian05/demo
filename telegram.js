const TELEGRAM_BOT_TOKEN = '7993946782:AAEgeQAdJgndQN7M7DCsmco63F3t90ITNxM';
// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π ID –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @getmyid_bot
const TELEGRAM_CHAT_ID = '-1002347225027';

async function sendTelegramNotification(repair) {
    try {
        const message = formatRepairMessage(repair);
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });

        const data = await response.json();
        if (!data.ok) {
            throw new Error(`Telegram API Error: ${data.description}`);
        }
        
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return false;
    }
}

function formatRepairMessage(repair) {
    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç
    if (repair.messageType === 'completion') {
        return `
‚úÖ <b>–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã</b>

üèô –ì–æ—Ä–æ–¥: ${repair.city}
üìç –ê–¥—Ä–µ—Å: ${repair.streets.join(', ')}, –¥–æ–º–∞: ${repair.houses.join(', ')}
üîß –¢–∏–ø: ${repair.isEmergency ? '–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ' : '–ü–ª–∞–Ω–æ–≤—ã–µ'} —Ä–∞–±–æ—Ç—ã
‚è∞ –ù–∞—á–∞–ª–æ: ${new Date(repair.startDate).toLocaleString()}
üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${new Date(repair.completedAt).toLocaleString()}
`;
    }
    
    // –î–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç
    return `
üöß <b>–ù–æ–≤—ã–µ —Ä–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>

üèô –ì–æ—Ä–æ–¥: ${repair.city}
üìç –ê–¥—Ä–µ—Å: ${repair.streets.join(', ')}, –¥–æ–º–∞: ${repair.houses.join(', ')}
üîß –¢–∏–ø: ${repair.isEmergency ? '–í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ' : '–ü–ª–∞–Ω–æ–≤—ã–µ'} —Ä–∞–±–æ—Ç—ã
‚è∞ –ù–∞—á–∞–ª–æ: ${new Date(repair.startDate).toLocaleString()}
${repair.endDate ? `üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${new Date(repair.endDate).toLocaleString()}` : ''}
`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage() {
    const testRepair = {
        city: '–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥',
        streets: ['–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞'],
        houses: ['1'],
        isEmergency: false,
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 86400000).toISOString(),
        resolved: false
    };

    const result = await sendTelegramNotification(testRepair);
    if (result) {
        alert('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
} 